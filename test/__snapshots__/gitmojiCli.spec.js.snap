// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`config module should match for setAutoAdd and getAutoAdd 1`] = `false`;

exports[`config module should match for setEmojiFormat and getEmojiFormat 1`] = `"code"`;

exports[`config module should match for setScopePrompt and getScopePrompt 1`] = `false`;

exports[`config module should match for setSignedCommit and getSignedCommit 1`] = `false`;

exports[`config module should match the exported methods 1`] = `
Object {
  "getAutoAdd": [Function],
  "getEmojiFormat": [Function],
  "getScopePrompt": [Function],
  "getSignedCommit": [Function],
  "setAutoAdd": [Function],
  "setEmojiFormat": [Function],
  "setScopePrompt": [Function],
  "setSignedCommit": [Function],
}
`;

exports[`constants module should match for the exported constants 1`] = `
Object {
  "AUTO_ADD": "autoAdd",
  "CODE": "code",
  "EMOJI_FORMAT": "emojiFormat",
  "HOOK_FILE_CONTENTS": "#!/bin/sh
# gitmoji as a commit hook
exec < /dev/tty
gitmoji --hook $1
",
  "HOOK_MODE": "hook",
  "HOOK_PATH": "/hooks/prepare-commit-msg",
  "HOOK_PERMISSIONS": 509,
  "SCOPE_PROMPT": "scopePrompt",
  "SIGNED_COMMIT": "signedCommit",
  "TITLE_MAX_LENGTH_COUNT": 48,
}
`;

exports[`gitmoji module commit should match for the commit snapshot with the given prompts 1`] = `"git commit  -m \\":zap: Improving performance issues.\\" -m \\"Refactored code. Fixes #5\\""`;

exports[`gitmoji module commit should match for the commit snapshot with the given prompts 2`] = `"git commit  -m \\":zap: Improving performance issues.\\" -m \\"Refactored code. Fixes ABC-123\\""`;

exports[`gitmoji module commit should match for the commit snapshot with the given prompts 3`] = `"git commit  -m \\":zap: (Scope): Improving performance issues.\\" -m \\"Refactored code.\\""`;

exports[`gitmoji module should match for gitmoji class 1`] = `
GitmojiCli {
  "_gitmojiApiClient": [Function],
  "_gitmojis": undefined,
}
`;

exports[`guard module message should return error message when contains invalid characters 1`] = `"[31mEnter a valid commit message[39m"`;

exports[`guard module title should return an error message when its empty 1`] = `"[31mEnter a valid commit title[39m"`;

exports[`guard module title should return error message when contains invalid characters 1`] = `"[31mEnter a valid commit title[39m"`;

exports[`prompts module should commit using the text emoji 1`] = `":zap:"`;

exports[`prompts module should commit using the unicode emoji 1`] = `"⚡️"`;

exports[`prompts module should match for the config prompts 1`] = `
Array [
  Object {
    "message": "Enable automatic \\"git add .\\"",
    "name": "autoAdd",
    "type": "confirm",
  },
  Object {
    "choices": Array [
      Object {
        "name": ":smile:",
        "value": "code",
      },
      Object {
        "name": "😄",
        "value": "emoji",
      },
    ],
    "message": "Select how emojis should be used in commits",
    "name": "emojiFormat",
    "type": "list",
  },
  Object {
    "message": "Enable signed commits",
    "name": "signedCommit",
    "type": "confirm",
  },
  Object {
    "message": "Enable scope prompt",
    "name": "scopePrompt",
    "type": "confirm",
  },
]
`;

exports[`prompts module should match for the gitmoji prompts 1`] = `
Array [
  Object {
    "message": "Choose a gitmoji:",
    "name": "gitmoji",
    "source": [Function],
    "type": "autocomplete",
  },
  Object {
    "message": "Enter the commit title",
    "name": "title",
    "transformer": [Function],
    "validate": [Function],
  },
  Object {
    "message": "Enter the commit message:",
    "name": "message",
    "validate": [Function],
  },
]
`;

exports[`utils module inputCountTransformer should match for an input with characters count string 1`] = `"[29/48]: Improving performance issues."`;
